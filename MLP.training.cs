// This file was auto-generated by ML.NET Model Builder.
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers.LightGbm;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace NeuralNetworks
{
    public partial class MLP
    {
        public const string RetrainFilePath =  @"C:\Users\gunes\source\repos\NeuralNetworks\Data\part1_train.csv";
        public const char RetrainSeparatorChar = ',';
        public const bool RetrainHasHeader =  true;

         /// <summary>
        /// Train a new model with the provided dataset.
        /// </summary>
        /// <param name="outputModelPath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet"</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        public static void Train(string outputModelPath, string inputDataFilePath = RetrainFilePath, char separatorChar = RetrainSeparatorChar, bool hasHeader = RetrainHasHeader)
        {
            var mlContext = new MLContext();

            var data = LoadIDataViewFromFile(mlContext, inputDataFilePath, separatorChar, hasHeader);
            var model = RetrainModel(mlContext, data);
            SaveModel(mlContext, model, data, outputModelPath);
        }

        /// <summary>
        /// Load an IDataView from a file path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="inputDataFilePath">Path to the data file for training.</param>
        /// <param name="separatorChar">Separator character for delimited training file.</param>
        /// <param name="hasHeader">Boolean if training file has a header.</param>
        /// <returns>IDataView with loaded training data.</returns>
        public static IDataView LoadIDataViewFromFile(MLContext mlContext, string inputDataFilePath, char separatorChar, bool hasHeader)
        {
            return mlContext.Data.LoadFromTextFile<ModelInput>(inputDataFilePath, separatorChar, hasHeader);
        }



        /// <summary>
        /// Save a model at the specified path.
        /// </summary>
        /// <param name="mlContext">The common context for all ML.NET operations.</param>
        /// <param name="model">Model to save.</param>
        /// <param name="data">IDataView used to train the model.</param>
        /// <param name="modelSavePath">File path for saving the model. Should be similar to "C:\YourPath\ModelName.mlnet.</param>
        public static void SaveModel(MLContext mlContext, ITransformer model, IDataView data, string modelSavePath)
        {
            // Pull the data schema from the IDataView used for training the model
            DataViewSchema dataViewSchema = data.Schema;

            using (var fs = File.Create(modelSavePath))
            {
                mlContext.Model.Save(model, dataViewSchema, fs);
            }
        }


        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainModel(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }


        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(new []{new InputOutputColumnPair(@"theta1", @"theta1"),new InputOutputColumnPair(@"theta2", @"theta2"),new InputOutputColumnPair(@"theta3", @"theta3"),new InputOutputColumnPair(@"theta4", @"theta4"),new InputOutputColumnPair(@"theta5", @"theta5"),new InputOutputColumnPair(@"theta6", @"theta6"),new InputOutputColumnPair(@"thetad1", @"thetad1"),new InputOutputColumnPair(@"thetad2", @"thetad2"),new InputOutputColumnPair(@"thetad3", @"thetad3"),new InputOutputColumnPair(@"thetad4", @"thetad4"),new InputOutputColumnPair(@"thetad5", @"thetad5"),new InputOutputColumnPair(@"thetad6", @"thetad6"),new InputOutputColumnPair(@"tau1", @"tau1"),new InputOutputColumnPair(@"tau2", @"tau2"),new InputOutputColumnPair(@"tau3", @"tau3"),new InputOutputColumnPair(@"tau4", @"tau4"),new InputOutputColumnPair(@"tau5", @"tau5"),new InputOutputColumnPair(@"dm1", @"dm1"),new InputOutputColumnPair(@"dm2", @"dm2"),new InputOutputColumnPair(@"dm3", @"dm3"),new InputOutputColumnPair(@"dm4", @"dm4"),new InputOutputColumnPair(@"dm5", @"dm5"),new InputOutputColumnPair(@"da1", @"da1"),new InputOutputColumnPair(@"da2", @"da2"),new InputOutputColumnPair(@"da3", @"da3"),new InputOutputColumnPair(@"da4", @"da4"),new InputOutputColumnPair(@"da5", @"da5"),new InputOutputColumnPair(@"db1", @"db1"),new InputOutputColumnPair(@"db2", @"db2"),new InputOutputColumnPair(@"db3", @"db3"),new InputOutputColumnPair(@"db4", @"db4"),new InputOutputColumnPair(@"db5", @"db5")})      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"theta1",@"theta2",@"theta3",@"theta4",@"theta5",@"theta6",@"thetad1",@"thetad2",@"thetad3",@"thetad4",@"thetad5",@"thetad6",@"tau1",@"tau2",@"tau3",@"tau4",@"tau5",@"dm1",@"dm2",@"dm3",@"dm4",@"dm5",@"da1",@"da2",@"da3",@"da4",@"da5",@"db1",@"db2",@"db3",@"db4",@"db5"}))      
                                    .Append(mlContext.Regression.Trainers.LightGbm(new LightGbmRegressionTrainer.Options(){NumberOfLeaves=1453,NumberOfIterations=1561,MinimumExampleCountPerLeaf=23,LearningRate=0.346394644014286,LabelColumnName=@"ANGLE-ACC-ARM",FeatureColumnName=@"Features",ExampleWeightColumnName=null,Booster=new GradientBooster.Options(){SubsampleFraction=0.999999776672986,FeatureFraction=0.895829083868166,L1Regularization=2E-10,L2Regularization=0.254555505701113},MaximumBinCountPerFeature=236}));
           
            return pipeline;
        }
    }
 }
